#+TITLE: Ozzy's Emacs Config
#+AUTHOR: Ozzy Neto
#+STARTUP: show2levels

* General Configuration

** Basic Settings
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)
  (global-hl-line-mode t)
  (when window-system (global-prettify-symbols-mode t))
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  (column-number-mode)
#+end_src

** Config Edit/Reload
*** Edit
#+begin_src emacs-lisp
  ;; Function to visit config.org file
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  ;; Keybinding
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
*** Reload
#+begin_src emacs-lisp
  ;; Function to reload config
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  ;; Keybinding
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src


* Keyboard

** macOS Configuration/Compatibility


* Terminal

** Default Shell
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
#+end_src

** ansi-term
#+begin_src emacs-lisp
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

** vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t)
#+end_src

** eshell

*** Keybinding to Open Eshell
#+begin_src emacs-lisp
(global-set-key (kbd "<s-return>") 'eshell)
#+end_src

** Opening a Terminal in the Current Working Directory
#+begin_src emacs-lisp
  (defun open-terminal-in-workdir ()
    (interactive)
    (call-process-shell-command
     (concat "alacritty --working-directory " default-directory) nil 0))

  (global-set-key (kbd "C-c t") 'open-terminal-in-workdir)

#+end_src


* Completion

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

** Consult

** Embark

** Savehist
#+begin_src emacs-lisp
(use-package savehist
  :ensure t
  :init
  (savehist-mode))

#+end_src

** Which-Key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

** Prompts
*** Make ESC quit prompts
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** "Yes or No" to "y or n"
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src


* Interaction, Editing, Files

** Clipboard

*** Copy/Paste
#+begin_src emacs-lisp
;; Clipboard Pasting
(global-set-key (kbd "C-S-v") 'clipboard-yank)

#+end_src

** Indentation
#+begin_src emacs-lisp
  ;; Create a variable for our preferred tab width: 4
  (setq custom-tab-width 4)

  ;; Two callable functions for enabling/disabling tabs in Emacs
  (defun disable-tabs () (setq indent-tabs-mode nil))

  (defun enable-tabs  ()
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t)
    (setq tab-width custom-tab-width))

  ;; Hooks to Enable Tabs
  (add-hook 'prog-mode-hook 'enable-tabs)
  ;; Hooks to Disable Tabs
  (add-hook 'lisp-mode-hook 'disable-tabs)
  (add-hook 'emacs-lisp-mode-hook 'disable-tabs)

  ;; Making electric-indent behave sanely
  (setq-default electric-indent-inhibit t)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)

#+end_src

** Electric Pairs
*** Enable Electric Pair Mode
#+begin_src emacs-lisp
  ;; Auto close brackets
  (electric-pair-mode t)
#+end_src
*** Disable <> Expansion in Org Mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
             (setq-local electric-pair-inhibit-predicate
                     `(lambda (c)
                    (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

** Windows
*** switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src

*** Follow Split Window
#+begin_src emacs-lisp
  ;; Horizontal Splits
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  ;; Vertical Splits
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Subword
#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src
** Convenient Functions
*** kill-whole-word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src
** hungry-delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
** sudo-edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+end_src

* Visuals

** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono" :height 140)
#+end_src

** Themes

*** Modus Themes
#+begin_src emacs-lisp
  ;; Configure the Modus Themes' appearance
  (setq modus-themes-mode-line '(accented)
        modus-themes-region '(bg-only)
        modus-themes-hl-line '(accented)
        modus-themes-subtle-line-numbers t
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-paren-match '(intense)
        modus-themes-syntax '(yellow-comments)
        modus-themes-completions '(opinionated)
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-headings
        '((1 . (rainbow overline background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.2))
          (t . (semilight 1.1))))

  ;; Load the light theme by default
  ;;(load-theme 'modus-operandi t)

#+end_src

*** ef Themes
**** Package

#+begin_src emacs-lisp
(use-package dracula-theme
  :ensure t)
#+end_src
**** Configuration

#+begin_src emacs-lisp
  ;; If you like two specific themes and want to switch between them, you
  ;; can specify them in `ef-themes-to-toggle' and then invoke the command
  ;; `ef-themes-toggle'.  All the themes are included in the variable
  ;; `ef-themes-collection'.
  ;; (setq ef-themes-to-toggle '(ef-summer ef-winter))

  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).

  ;; (setq ef-themes-headings ; read the manual's entry or the doc string
  ;;       '((0 . (variable-pitch light 1.9))
  ;;         (1 . (variable-pitch light 1.8))
  ;;         (2 . (variable-pitch regular 1.7))
  ;;         (3 . (variable-pitch regular 1.6))
  ;;         (4 . (variable-pitch regular 1.5))
  ;;         (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
  ;;         (6 . (variable-pitch 1.3))
  ;;         (7 . (variable-pitch 1.2))
  ;;         (t . (variable-pitch 1.1))))

  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes)

  ;; Load the theme of choice:
  (load-theme 'ef-summer :no-confirm)

  ;; The themes we provide:
  ;;
  ;; Light: `ef-day', `ef-light', `ef-spring', `ef-summer'.
  ;; Dark:  `ef-autumn', `ef-dark', `ef-night', `ef-winter'.
  ;;
  ;; Also those which are optimized for deuteranopia (red-green color
  ;; deficiency): `ef-deuteranopia-dark', `ef-deuteranopia-light'.

  ;; We also provide these commands, but do not assign them to any key:
  ;;
  ;; - `ef-themes-toggle'
  ;; - `ef-themes-select'
  ;; - `ef-themes-load-random'
  ;; - `ef-themes-preview-colors'
  ;; - `ef-themes-preview-colors-current'

#+end_src

*** Doom Themes

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t)
#+end_src
*** Gruvbox

#+begin_src emacs-lisp
(use-package gruvbox-theme
  :ensure t)
#+end_src

** Line Numbers
#+begin_src emacs-lisp
  ;; Line Numbers for Programming Modes
  (defun my-display-numbers-hook ()
    (display-line-numbers-mode t)
    )
  (add-hook 'prog-mode-hook 'my-display-numbers-hook)

#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  ;; Rainbow mode enabled in HTML, CSS, and SASS modes
  (use-package rainbow-mode
        :init
        (dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
        (add-hook hook 'rainbow-mode)))
#+end_src

** Rainbow Delimeters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Beacon
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src


* Buffers
** Kill Current Buffer
Kill the current buffer whenever we use C-x k

#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src


* Org-Mode

** Basic Org Configuration
*** Org Tempo
#+begin_src emacs-lisp
(require 'org-tempo)  ;; So that <s TAB works again.
#+end_src
*** Code Blocks
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :hook
    (org-mode . (lambda () (org-superstar-mode 1))))

  (setq org-superstar-headline-bullets-list '("⁖" "◉" "○" "◈" "✸" "▷")
        org-hide-leading-stars t
        org-startup-indented t)
#+end_src
